# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
"""
functions used for pet_owner menu program
"""

import sqlite3 as sql 
import pandas as pd


def menu():
    """
    menu option for users

    Returns
    -------
    None.

    """
    print("""
   ----------------Main Menu-------------------------
    1) Display OWNER content and create DataFrame
    2) Display PETS content and create DataFrame
    3) Retrieve Owner and Pet data for specific Owner
    4) Calculate Total Charge by Owner
    5) Retrieve Pet information by PetBreed
    6) Exit 
    """)
    

def displayOwner():
    """
    get and display dataframe of OWNER table from database

    Returns
    -------
    None.

    """
    try:
        con = sql.connect('vet_serv.db')
        df = pd.read_sql_query('SELECT * FROM OWNER '
            , con)
        # index=False, skips autogenerated df first num column
        df.to_csv('owner.csv', index=False)
        print(df)
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()


def displayPets():
    """
    get and display dataframe of PETS table from database

    Returns
    -------
    None.

    """
    try:
        con = sql.connect('vet_serv.db')
        df = pd.read_sql_query('SELECT * FROM PETS '
            , con)
        df.to_csv('pets.csv', index=False)
        print(df)
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()


def getOwner_PetData():
    """
    get OwnerId and displayed all records from both OWNER and PETS table pertaining to OwnerId. Create CSV file after

    Returns
    -------
    None.

    """
    userId_Input = None
    # Loop until a valid integer is entered
    while userId_Input is None:
        try:
            userId_Input = int(input("Please enter the OwnerId (e.g. 0000): "))
        except ValueError:
            print("ERROR! Invalid input. Please enter a valid integer.")
    # get all fields from both tables for selected ownerId       
    try:
        con = sql.connect('vet_serv.db')
        cur = con.cursor()
        cur.execute(f'''
                    SELECT OWNER.OwnerId, OWNER.OwnerLastName, OWNER.OwnerFirstName, OWNER.OwnerPhone, OWNER.OwnerEmail,
                    PETS.PetId, PETS.PetName, PETS.PetBreed, PETS.PetDOB
                    FROM OWNER
                    JOIN PETS ON OWNER.OwnerId = PETS.OwnerId
                    WHERE OWNER.OwnerId = {userId_Input}
        ''')
        #fetch all data from selected columns in db
        rows = cur.fetchall() 
        if rows:
            csvColumns = ['OwnerId', 'OwnerLastName', 'OwnerFirstName', 'OwnerPhone', 'OwnerEmail', 
                       'PetId', 'PetName', 'PetBreed', 'PetDOB']
            df = pd.DataFrame(rows, columns=csvColumns)
            print(df)
             # Get the last name for the filename
            owner_last_name = df['OwnerLastName'].iloc[0].lower()  # Get the last name from the first row
            filename = f"{owner_last_name}_{userId_Input}.csv"
            df.to_csv(filename, index=False)
            print(f"CSV file created named: {filename}")
        else:
            print("No records found for the specified OwnerId.")

    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()


def calculateCharge():
    """
    calculate the total of all charges for selected OwnerId, display total results

    Returns
    -------
    None.

    """
    userId_Input = None
    while userId_Input is None:
        try:
            userId_Input = int(input("Please enter the OwnerId (e.g. 0000): "))
        except ValueError:
            print("ERROR! Invalid input. Please enter a valid integer.")      
    try:
        con = sql.connect('vet_serv.db')
        cur = con.cursor()
        cur.execute(f'''
                    SELECT OWNER.OwnerId, OWNER.OwnerLastName, OWNER.OwnerFirstName, OWNER.OwnerEmail,
                    PETS.PetId, PETS.PetName, PETS.PetBreed, PETS.Service, PETS.Date, PETS.Charge
                    FROM OWNER
                    JOIN PETS ON OWNER.OwnerId = PETS.OwnerId
                    WHERE OWNER.OwnerId = {userId_Input}
        ''')
        rows = cur.fetchall() 
        if rows:
            csvColumns = ['OwnerId', 'OwnerLastName', 'OwnerFirstName', 'OwnerEmail', 
                       'PetId', 'PetName', 'PetBreed', 'Service', 'Date', 'Charge']
            df = pd.DataFrame(rows, columns=csvColumns,)
            print(df)
            totalCharges = df.groupby('OwnerId')['Charge'].sum()
            print(f"Total charges for {userId_Input} is: ${totalCharges[userId_Input]:.2f}")
        else:
            print("No records found for the specified OwnerId.")
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()
    

def getPetBreedInfo():
    """
    get selected Pet Breed from user and display total charges + average for pet breed entered

    Returns
    -------
    None.

    """
    try:
        con = sql.connect('vet_serv.db')
        df = pd.read_sql_query('SELECT * FROM PETS '
            , con)
        petBreed_Input = None
        while petBreed_Input is None:
            try:
                petBreed_Input = input("Please enter the pet breed you want to research (e.g. Poodle): ")
            except ValueError:
                print("ERROR! Invalid input. Please enter a valid pet breed.")
        # filter the DataFrame to only include rows with the specified pet breed
        filtered_df = df[df['PetBreed'] == petBreed_Input]
        if not filtered_df.empty: # .empty() check if a DataFrame is empty
            total_charges = filtered_df['Charge'].sum()
            avg_charge = filtered_df['Charge'].mean() # get avg for pet breed
            print(f"Total charges for pet breed '{petBreed_Input}': ${total_charges:.2f}")
            print(f"Average charge for pet breed '{petBreed_Input}': ${avg_charge:.2f}")
        else:
            print(f"No records found for the pet breed '{petBreed_Input}'.")
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()

def main():
    userChoice = 0
    while userChoice != 6:
        menu()
        userChoice = input("Please select an option above: ")
        if userChoice == '1':
            displayOwner()
        elif userChoice == '2':
            displayPets()
        elif userChoice == '3':
            getOwner_PetData()
        elif userChoice == '4':
            calculateCharge()
        elif userChoice == '5':
            getPetBreedInfo()
        elif userChoice == '6':
            print("Goodbye...")
            break 
        else:
            print("Invalid choice")
    
    
if __name__ == "__main__":
    main()