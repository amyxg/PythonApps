# -*- coding: utf-8 -*-
"""
A menu-driven program to display owners and pets from a database using sql
"""

import sqlite3 as sql 
import pandas as pd


def menu():
    print("""

    1) Display OWNER content and create DataFrame
    2) Display PETS content and create DataFrame
    3) Retrieve Owner and Pet data for specific Owner
    4) Calculate Total Charge by Owner
    5) Retrieve Pet information by PetBreed
    6) Exit 
    """)
    

def displayOwner():
    try:
        con = sql.connect('vet_serv.db')
        df = pd.read_sql_query('SELECT * FROM OWNER '
            , con)
        # index=False, skips autogenerated df first num column
        df.to_csv('owner.csv', index=False)
        print(df)
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()


def displayPets():
    try:
        con = sql.connect('vet_serv.db')
        df = pd.read_sql_query('SELECT * FROM PETS '
            , con)
        # index=False, skips autogenerated df first num column
        df.to_csv('pets.csv', index=False)
        print(df)
    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()


def getOwner_PetData():
    userId_Input = None
    # Loop until a valid integer is entered
    while userId_Input is None:
        try:
            userId_Input = int(input("Please enter the OwnerId (e.g. 0000): "))
        except ValueError:
            print("ERROR! Invalid input. Please enter a valid integer.")
    # get all fields from both tables for selected ownerId       
    try:
        con = sql.connect('vet_serv.db')
        cur = con.cursor()
        cur.execute(f'''
                    SELECT OWNER.OwnerId, OWNER.OwnerFirstName, OWNER.OwnerLastName, OWNER.OwnerPhone, OWNER.OwnerEmail
                    PETS.PetId, PETS.PetName, PETS.PetBreed, PETS.PetDOB, PETS.OwnerId
                    FROM OWNER
                    JOIN PETS ON OWNER.OwnerId = PETS.OwnerId
                    WHERE OWNER.OwnerId = {userId_Input}
        ''')
        #fetch all data from selected columns in db
        rows = cur.fetchall() 
        if rows:
            csvColumns = ['OwnerId', 'OwnerFirstName', 'OwnerLastName', 'OwnerPhone', 'OwnerEmail', 
                       'PetId', 'PetName', 'PetBreed', 'PetDOB']
            df = pd.DataFrame(rows, columns=csvColumns)
             # Get the last name for the filename
            owner_last_name = df['OwnerLastName'].iloc[0].lower()  # Get the last name from the first row
            filename = f"{owner_last_name}_{userId_Input}.csv"
            df.to_csv(filename, index=False)
        else:
            print("No records found for the specified OwnerId.")

    except sql.IntegrityError:
        print("Error: Data could not be saved due to integrity constraints.")
    except sql.OperationalError:
        print("Operational error occurred.")
    finally:
        con.close()

def main():
    userChoice = 0
    while userChoice != 6:
        menu()
        userChoice = input("Please select an option above: ")
        if userChoice == '1':
            displayOwner()
        elif userChoice == '2':
            displayPets()
        elif userChoice == '3':
            getOwner_PetData()
        elif userChoice == '4':
            print(4)
        elif userChoice == '5':
            print(5)
        elif userChoice == '6':
            print("Goodbye...")
            break 
        else:
            print("Invalid choice")
    
    
if __name__ == "__main__":
    main()